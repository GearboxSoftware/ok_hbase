{"name":"ok_hbase","tagline":"Lightweight Ruby Adapter for HBase","body":"## What?\r\n### Totally cribbed from [HappyBase](https://github.com/wbolster/happybase)\r\nok_hbase is a lightweight Hbase Adapter for Ruby applications that don't have the option of running in JRuby.\r\nYou can use ok_hbase in anything CLI Ruby scripts to a Sinatra or Rails application: 'OkHbase::ActiveModel` is a good starting point for those more comfortable with ActiveRecord.\r\n\r\n\r\n## Why?\r\nThere is a lack of good gems to interface with HBase from Ruby (not JRuby).  \r\nGems like [hbase-ruby](https://github.com/sishen/hbase-ruby) and\r\n[hbaserb](https://github.com/bmuller/hbaserb) are too basic; [hbase-stargate](https://github.com/greglu/hbase-stargate) uses REST, not Thrift; [Rhino](https://github.com/sqs/rhino) hasn't been updaed in 3 years; and finally, [Massive Record](https://github.com/CompanyBook/massive_record) does not meet our performance expectations.  \r\n\r\nAfter limping along with Massive Record for too long, I decided it would be better and quicker to start from scratch than to try to [fix](https://github.com/okcwest/massive_record) Massive Record.\r\n\r\nBesides, it's an interesting exercise!\r\n\r\n## Goals\r\n### Speed\r\nOne of the biggest issues we've seen with usage Massive Record is speed, or lack there of. We use HBase to back the messaging system on [Kiss.com](http://www.kiss.com), and for users with large inboxes, retrieval is painfully slow (~1000+ messages take 20sec or more). Writes were slow too, ~500ms is the norm. Some of this slowness is probably due to improper HBase configuration, but we saw signifigant [differences](https://github.com/okcwest/subspace/wiki/HBase-Benchmarking-Notes) reading the same data from different libraries. So we know it's possible to have faster HBase code in Ruby.\r\n\r\n### Simplicity\r\nWe have come to the conclusion (somewhat obvious in hindsight) that a traditional ORM pattern is a poor fit for HBase, and the overhead not only slows things down, but unnecessarily complicates things. With ok-hbase I am trying to find a balance: keep it simple, but still provide some nice features above and beyond being just a thin wrapper around the Thrift libraries.\r\n\r\n### Flexibility\r\nBuilding just another thin wrapper around the Thrift libraries wouldn't be very useful, so with ok-hbase, I hope to provide a bit more. While a traditional ORM is not a good fit for HBase, there are some ORM-like features that would be nice to have. These features will be implemented as mixins or concerns: You can use the basic table class, or subclass it and add the mixins you want. Check out the [TODO](https://github.com/okcwest-projects/ok-hbase/wiki#todo) section to see what's planned.","google":"UA-41698711-1","note":"Don't delete this file! It's used internally to help with page regeneration."}